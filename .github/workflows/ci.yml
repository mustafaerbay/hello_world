name: CI

on:
  push:
    branches:
      - 'v1'
    paths:
      - 'static/**'
  workflow_dispatch:
    inputs:
      job:
        description: 'Deploy to the environment'
        required: true
        default: 'deploy-prod'

env:
  # For push docker image to the docker registry
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      # To use these values in deploy-prod job
      image_tag: ${{ steps.vars.outputs.sha_short }}
      app_name: ${{ steps.vars.outputs.app_name }}
      branch: ${{ steps.vars.outputs.branch }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
        # For different environments we could use different variables files
      - name: Assign variables from file to Env variable
        run: |
            cat env/default/variables >> $GITHUB_ENV
        # Get values for verification and for image_tag
      - name: Declare git branch and sha
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=app_name::$(env |grep APP_NAME | cut -d '=' -f 2)"
          
      - name: Check branch and sha
        run: |
          echo "Branch: ${{ steps.vars.outputs.branch }}"
          echo "Sha: ${{ steps.vars.outputs.sha_short }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # Build docker images for different architectures.
      # https://docs.docker.com/buildx/working-with-buildx/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # https://github.com/marketplace/actions/docker-login
      - name: Login to DockerHub
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_PASSWORD != '' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # - name: Build docker image
      #   run: |
      #     ./build.sh -b ${{ steps.vars.outputs.sha_short }}
          
      - name: Build for multiplatform
        env: 
          image_tag: ${{ steps.vars.outputs.sha_short }}
        run: |
          docker buildx build \
            --push \
            --platform=linux/amd64,linux/arm64,linux/386 \
            --tag=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            --tag=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ env.image_tag }} .

      - name: Test docker container 
        run: |
          ./build.sh -t ${{ steps.vars.outputs.sha_short }}
      - name: Security scan on docker image
        uses: snyk/actions/docker@master
        id: docker-image-scan
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ steps.vars.outputs.sha_short }}
          args: --file=./Dockerfile
            --severity-threshold=high
          sarif: true
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
  deploy-prod:
    needs: build  
    runs-on: ubuntu-latest
    steps:
      # This step waits for manual approval to deliver code to the related environment
      - name: Manual approve for deployment
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: mustafaerbay
          minimum-approvals: 1
          issue-title: "Deploying application version ${{ needs.build.outputs.app_name }}:${{ needs.build.outputs.image_tag }} "

      - name: checkout again
        uses: actions/checkout@v2

      - name: Declare git sha
        id: deploy-prod-vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=latest_commit::$(git log -1)"
      
      # https://github.com/stefanprodan/kube-tools
      # https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
      # https://github.com/marketplace/actions/update-and-apply-kubernetes-configuration-files
      #
      # kube-tools provide us to run kubectl command and besides that run some extra tools.
      # The if condition checks if there is unexpected commit during delivery phase
      - name: Run Kubernetes tools
        if: ${{ steps.deploy-prod-vars.outputs.sha_short == needs.build.outputs.sha_short }}
        uses: stefanprodan/kube-tools@v1
        with:
          kubectl: 1.23.0
          command: |
            kubectl apply -f k8s/application/storage/pv/nginx_pv.yml
            kubectl apply -f k8s/application/storage/pv-claim/nginx_pvc.yml
            kubectl apply -f k8s/application/workloads/statefulset/nginx.yml
            kubectl apply -f k8s/application/service/nginx.yml
      # 
      # https://github.com/marketplace/actions/create-an-issue
      - name: create issue if there was a commit between versions
        if: ${{ steps.deploy-prod-vars.outputs.sha_short != needs.build.outputs.sha_short }}
        uses: JasonEtco/create-an-issue@v2
        with:
          update_existing: true
          search_existing: all
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          action_id: ${{ github.ref }}
          branch: ${{ needs.build.outputs.branch }}
          latest_commit: ${{ steps.deploy-prod-vars.outputs.latest_commit }}